// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sql

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createDish = `-- name: CreateDish :one
INSERT INTO dish (
  id, restaurant_id, name, images, rating, tags, category_id, created_by, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
) RETURNING id, restaurant_id, name, images, rating, tags, category_id, created_by, updated_at, created_at
`

type CreateDishParams struct {
	ID           uuid.UUID
	RestaurantID uuid.UUID
	Name         string
	Images       []string
	Rating       *float64
	Tags         []string
	CategoryID   uuid.UUID
	CreatedBy    uuid.UUID
	CreatedAt    time.Time
	UpdatedAt    *time.Time
}

func (q *Queries) CreateDish(ctx context.Context, arg CreateDishParams) (Dish, error) {
	row := q.db.QueryRow(ctx, createDish,
		arg.ID,
		arg.RestaurantID,
		arg.Name,
		arg.Images,
		arg.Rating,
		arg.Tags,
		arg.CategoryID,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.Name,
		&i.Images,
		&i.Rating,
		&i.Tags,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getDishById = `-- name: GetDishById :one
SELECT id, restaurant_id, name, images, rating, tags, category_id, created_by, updated_at, created_at
FROM dish
WHERE id = $1
`

func (q *Queries) GetDishById(ctx context.Context, id uuid.UUID) (Dish, error) {
	row := q.db.QueryRow(ctx, getDishById, id)
	var i Dish
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.Name,
		&i.Images,
		&i.Rating,
		&i.Tags,
		&i.CategoryID,
		&i.CreatedBy,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
